// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  Questionnaire Questionnaire[]

  DesignTemplate DesignTemplate[]

  UserGroup UserGroup[]

  UserRole UserRole[]
}

enum Status {
  NEW
  DRAFT
  ACTIVE
  INACTIVE
}

enum Role {
  ADMIN // Can do anything(create questionnaire, add logics, create template, assign roles, create reports, etc)
  DESIGNER // Can edit questionnaire, add logics, create template, create reports, can duplicate a survey
  QA // Can view questionnaire, create reports
  ANALYST // Can create/view reports
}

model Questionnaire {
  id         String   @id @default(cuid())
  name       String   @default("Untitled Questionnaire")
  userId     String
  user       User @relation(fields: [userId], references: [id])
  obj        Json
  testUrl    String   @default("")
  pubUrl     String   @default("")
  createdAt  DateTime @default(now())
  modifiedAt DateTime @updatedAt
  status     Status   @default(NEW)
  templateId String?
  template   DesignTemplate? @relation(fields: [templateId], references: [id])

  UserGroupQuestionnaire UserGroupQuestionnaire[]
}

model DesignTemplate {
  id         String   @id @default(cuid())
  name       String   @default("Untitled Template")
  obj        Json
  userId     String
  user       User @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  Questionnaire Questionnaire[]
}

model UserGroup {
  id    String  @id @default(cuid())
  name  String

  User User[]

  UserRole UserRole[]

  UserGroupQuestionnaire UserGroupQuestionnaire[]
}

model UserRole {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  groupId   String
  userGroup UserGroup @relation(fields: [groupId], references: [id])
  role      Role
}

model UserGroupQuestionnaire {
  id             String      @id @default(cuid())
  userGroupId    String
  userGroup      UserGroup   @relation(fields: [userGroupId], references: [id])
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
}
